const { Connection, PublicKey } = require('@solana/web3.js');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RPC_SERVERS = [
    'https://rpc.ankr.com/solana',
    'https://solana-api.projectserum.com',
    'https://api.mainnet-beta.solana.com'
];
let currentRpcIndex = 0;
let connection = new Connection(RPC_SERVERS[currentRpcIndex], {
    commitment: 'confirmed',
    maxSupportedTransactionVersion: 0,
});
const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
const WHALE_THRESHOLD = 0.2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ USD –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ "–∫–∏—Ç–∞"
const UPDATE_INTERVAL = 30000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
const TELEGRAM_BOT_TOKEN = '7136076038:AAHLDvdWqtWusOrF3cd1BWaFeWWhOcRGrl8';
const TELEGRAM_CHAT_IDS = ['280101728', '170788417'];
let trackedTokens = new Map();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
let requestQueue = [];
let isProcessingQueue = false;
const delay = 500;
const processedTransactions = new Set();
const MAX_PROCESSED_TRANSACTIONS = 1000;
const MAX_TRACKED_TOKENS = 5000;

// –°–º–µ–Ω–∞ RPC-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
async function switchRpcServer() {
    currentRpcIndex = (currentRpcIndex + 1) % RPC_SERVERS.length;
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RPC-—Å–µ—Ä–≤–µ—Ä: ${RPC_SERVERS[currentRpcIndex]}`);
    connection = new Connection(RPC_SERVERS[currentRpcIndex], {
        commitment: 'confirmed',
        maxSupportedTransactionVersion: 0,
    });
    cleanupOldData(); // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—á–µ—Ä–µ–¥—å—é –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
async function processQueue() {
    if (isProcessingQueue) return;
    isProcessingQueue = true;

    while (requestQueue.length > 0) {
        const { fn, resolve, reject } = requestQueue.shift();
        try {
            const result = await fn();
            resolve(result);
        } catch (error) {
            if (error.response && error.response.status === 429) {
                const retryAfter = parseInt(error.response.headers['retry-after']) || delay;
                console.warn(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${retryAfter} –º—Å.`);
                await new Promise((r) => setTimeout(r, retryAfter));
                requestQueue.unshift({ fn, resolve, reject });
            } else {
                reject(error);
            }
        }
        await new Promise((r) => setTimeout(r, delay));
    }

    isProcessingQueue = false;
    cleanupOldData();
}

function addToQueue(fn) {
    return new Promise((resolve, reject) => {
        requestQueue.push({ fn, resolve, reject });
        processQueue();
    });
}


// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function cleanupOldData() {
    while (processedTransactions.size > MAX_PROCESSED_TRANSACTIONS) {
        processedTransactions.delete(processedTransactions.keys().next().value);
    }

    if (trackedTokens.size > MAX_TRACKED_TOKENS) {
        const keys = Array.from(trackedTokens.keys());
        const keysToDelete = keys.slice(0, trackedTokens.size - MAX_TRACKED_TOKENS);
        keysToDelete.forEach((key) => trackedTokens.delete(key));
    }
}

const lastNotificationTimestamps = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
async function notifyTelegram(tokenData, amountInSol, signature) {
    const currentTime = Date.now();
    const cooldownTime = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—É
    if (lastNotificationTimestamps[tokenData.contract]) {
        const timeSinceLastNotification = currentTime - lastNotificationTimestamps[tokenData.contract];
        if (timeSinceLastNotification < cooldownTime) {
            console.log(`–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É ${tokenData.contract} –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç.`);
            return;
        }
    }

    const message = `
üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∏—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è! üö®
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amountInSol.toFixed(2)} SOL
üìú –ö–æ–Ω—Ç—Ä–∞–∫—Ç:
\`\`\`
${tokenData.contract}
\`\`\`
üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: ${tokenData.name}
üíµ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $${tokenData.marketCap.toLocaleString()}
üë• –•–æ–ª–¥–µ—Ä—ã: ${tokenData.holdersCount}
üåê –°–æ—Ü—Å–µ—Ç–∏:
${tokenData.socials.map((social) => `- [${social.type}](${social.url})`).join('\n')}

üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é](https://solscan.io/tx/${signature})
üìä Dexscreener: [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Dexscreener](https://dexscreener.com/solana/${tokenData.contract})
    `;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    for (const chatId of TELEGRAM_CHAT_IDS) {
        try {
            await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: chatId,
                text: message,
                parse_mode: 'Markdown',
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    lastNotificationTimestamps[tokenData.contract] = currentTime;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
    setTimeout(() => {
        delete lastNotificationTimestamps[tokenData.contract];
        console.log(`–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenData.contract} —Å–Ω—è—Ç–æ —Å –æ–∂–∏–¥–∞–Ω–∏—è.`);
    }, cooldownTime);
}

function extractTokenAddresses(transactionData) {
    const tokenAddresses = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ transactionData –∏ meta —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!transactionData || !transactionData.meta) {
        // console.warn("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
        return tokenAddresses; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º preTokenBalances –∏ postTokenBalances
    const preTokenBalances = transactionData.meta.preTokenBalances || [];
    const postTokenBalances = transactionData.meta.postTokenBalances || [];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    const allTokenBalances = [...preTokenBalances, ...postTokenBalances];

    for (const balance of allTokenBalances) {
        if (balance.mint) {
            tokenAddresses.push(balance.mint); // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (mint)
        }
    }
    console.log(tokenAddresses)
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(tokenAddresses.filter(item => item !== 'So11111111111111111111111111111111111111112'))];
}


// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤
async function monitorWhaleTransactions() {
    console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤...');
    connection.onLogs(TOKEN_PROGRAM_ID, async (logInfo) => {
        const signature = logInfo.signature;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç "Transfer" –∏–ª–∏ "MintTo" –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const hasRelevantInstruction = logInfo.logs.some(log => 
                log.includes("Instruction: Transfer")
            );

            const isConfirmed = logInfo.logs.some(log => 
                log === `Program ${TOKEN_PROGRAM_ID} success`
            );

            if (!hasRelevantInstruction || !isConfirmed) {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                // console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${signature} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "Transfer"  –ª–∏–±–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.`);
                return;
            }

            const tx = await addToQueue(() =>
                connection.getTransaction(signature, {
                    maxSupportedTransactionVersion: 0,
                })
            );

            if (tx && tx.meta && tx.meta.preBalances && tx.meta.postBalances) {
                const tokenTransfers = tx.meta.postTokenBalances.filter((balance, index) => {
                    const preBalance = tx.meta.preBalances[index] || 0;
                    const postBalance = tx.meta.postBalances[index] || 0;

                    return (
                        preBalance > postBalance &&
                        balance.mint &&
                        trackedTokens.has(balance.mint)
                    );
                });

                if (tokenTransfers.length === 0) {
                    // console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${signature} –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏. –ü—Ä–æ–ø—É—Å–∫.`);
                    return;
                }

                for (const transfer of tokenTransfers) {
                    const tokenMint = transfer.mint;
                    

                    const amountInSol = await calculateSolSpent(tx);
                    console.log("alarm", amountInSol, tokenMint);
                    if (amountInSol >= WHALE_THRESHOLD) {
                        const tokenData = await getTokenDetails(tokenMint);
                        console.log(
                            `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∏—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${signature}, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ ${amountInSol} SOL –Ω–∞ ${tokenData.baseToken.name} (${tokenMint})`
                        );
                        await notifyTelegram({
                            name: tokenData.baseToken.name,
                            contract: tokenMint,
                            marketCap: tokenData.marketCap,
                            holdersCount: trackedTokens.get(tokenMint).holdersCount,
                            socials: tokenData.info.socials,
                        }, amountInSol, signature);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ–≤:', error);

            if (error.message.includes('Subscription refused')) {
                console.warn('–õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π RPC-—Å–µ—Ä–≤–µ—Ä.');
                await switchRpcServer();
            }
        }
    });
}


// –†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö SOL
async function calculateSolSpent(tx) {
    let totalSolSpent = 0;

    if (tx.meta && tx.meta.preBalances && tx.meta.postBalances) {
        const preBalances = tx.meta.preBalances;
        const postBalances = tx.meta.postBalances;

        for (let i = 0; i < preBalances.length; i++) {
            const solSpent = (preBalances[i] - postBalances[i]) / 1e9;
            if (solSpent > 0) {
                totalSolSpent += solSpent;
            }
        }
    }

    return totalSolSpent;
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function monitorTokens() {
    console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...');
    connection.onLogs(new PublicKey(
        '7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5'
      ), async (logInfo) => {
        const signature = logInfo.signature;
        const tx = await connection.getTransaction(signature, {
                maxSupportedTransactionVersion: 0,
            })
        setTimeout(async () => {
            const adresses = extractTokenAddresses(tx)
            await processTokens(adresses.map(item => ({tokenAddress: item })))
        }, 10000)
    })
    setInterval(async () => {
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö...');
        const tokens = await getTokensFromDexscreener();
        await processTokens(tokens);
    }, UPDATE_INTERVAL);
}

async function getTokensFromDexscreener() {
    try {
        const response = await axios.get('https://api.dexscreener.com/token-profiles/latest/v1');
        if (response.data && Array.isArray(response.data)) {
            console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö');
            return response.data.filter((token) => token.chainId === 'solana');
        }
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤');
        return [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return [];
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–∫–µ–Ω–∞
async function getTokenHoldersCount(tokenAddress) {
    try {
        const tokenMint = new PublicKey(tokenAddress);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–æ–∫–µ–Ω–∞
        const largestAccounts = await connection.getTokenLargestAccounts(tokenMint);
        if (largestAccounts.value && largestAccounts.value.length > 0) {
            return largestAccounts.value.length; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤
        }

        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}`);
        return 0;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}:`, error);
        return 0;
    }
}
async function processTokens(tokens) {
    for (const token of tokens) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ trackedTokens
        if (trackedTokens.has(token.tokenAddress)) {
            console.log(`–¢–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${token.tokenAddress}. –ü—Ä–æ–ø—É—Å–∫.`);
            continue;
        }

        const tokenDetails = await getTokenDetails(token.tokenAddress);
        if (tokenDetails) {
            const { marketCap, info, baseToken } = tokenDetails;

            if (
                marketCap &&
                marketCap >= 100000 &&
                marketCap <= 1000000 &&
                info &&
                info.socials &&
                info.socials.length >= 2
            ) {
                const holdersCount = (await getTokenHoldersCount(token.tokenAddress)) || 0;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ trackedTokens
                trackedTokens.set(token.tokenAddress, {
                    name: baseToken.name,
                    contract: token.tokenAddress,
                    marketCap,
                    holdersCount,
                    socials: info.socials,
                });

                console.log(`–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${baseToken.name} (${token.tokenAddress})`);
            } else {
                console.log(
                    `–¢–æ–∫–µ–Ω ${baseToken?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${token.tokenAddress}) –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º`
                );
            }
        }
    }
}


async function getTokenDetails(tokenAddress) {
    try {
        const response = await axios.get(`https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`);
        if (response.data && response.data.pairs && response.data.pairs.length > 0) {
            return response.data.pairs[0];
        }
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress} ${JSON.stringify(response.data)}`);
        return null;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}:`, error);
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤...');
    monitorTokens();
    monitorWhaleTransactions();
}

main().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
});