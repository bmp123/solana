import { Connection, PublicKey } from '@solana/web3.js';
import axios from 'axios';
import TelegramBot from 'node-telegram-bot-api';
import { execFile } from 'child_process';
import { resolve } from 'path';
import { appendFile } from 'fs';

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
// const ERROR_LOG_FILE = resolve(__dirname, 'error_logs.txt');


// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Long Polling

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RPC_SERVERS = [
    'https://summer-quaint-dream.solana-mainnet.quiknode.pro/9898a29e57e62e92e6e06f89d40c6e7c85d19121',
    'https://api.mainnet-beta.solana.com'
];
let currentRpcIndex = 0;
let connection = new Connection(RPC_SERVERS[0], {
    commitment: 'confirmed',
    maxSupportedTransactionVersion: 0,
});
let connectionForToken = new Connection(RPC_SERVERS[1], {
    commitment: 'confirmed',
    maxSupportedTransactionVersion: 0,
});
const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
const WHALE_THRESHOLD = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ USD –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ "–∫–∏—Ç–∞"
const UPDATE_INTERVAL = 10000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
const TELEGRAM_BOT_TOKEN = '7136076038:AAHLDvdWqtWusOrF3cd1BWaFeWWhOcRGrl8';
const TELEGRAM_SCAM_CONTRACTS = new Set(); // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
const TELEGRAM_CHAT_IDS = ['280101728', '170788417'];
let trackedTokens = new Map();
const subscriptions = new Map();
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
let requestQueue = [];
let isProcessingQueue = false;
const delay = 500;
const processedTransactions = new Set();
const MAX_PROCESSED_TRANSACTIONS = 1000;
const MAX_TRACKED_TOKENS = 5000;
const SOL_ADDRESS = "So11111111111111111111111111111111111111112";
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
function subscribeToTokenLogs(tokenAddress) {
    if (subscriptions.has(tokenAddress)) {
        console.log(`–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–æ–∫–µ–Ω: ${tokenAddress}`);
        return;
    }

    const subscriptionId = connection.onLogs(
        new PublicKey(tokenAddress),
        async (logInfo) => {
            // console.log(JSON.stringify(logInfo))
            return
            
        }
    );

    subscriptions.set(tokenAddress, subscriptionId);
    console.log(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–≥–∏ —Ç–æ–∫–µ–Ω–∞ ${tokenAddress} —Å–æ–∑–¥–∞–Ω–∞.`);
}
const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkQXQiOjE3MzE3NDQ0MTI5MDgsImVtYWlsIjoiaWRhbmlsb3YxNkBnbWFpbC5jb20iLCJhY3Rpb24iOiJ0b2tlbi1hcGkiLCJhcGlWZXJzaW9uIjoidjIiLCJpYXQiOjE3MzE3NDQ0MTJ9.915DpDz2k4xzw7MGQ2HO73HZNWm_UAc7W10xdkccZRQ';

async function processTokens(tokens, needNotify = false) {
    for (const token of tokens) {
        const tokenAddress = token.tokenAddress;
        if (trackedTokens.has(tokenAddress)) {
            continue;
        }

        try {
            // const tokenDetails = await getTokenDetails(tokenAddress);
            const dex = await getDEXTokenDetails(tokenAddress)
            console.log("DEX: ", dex)
            if (!dex) {
                
                const sol = await getTokenDetails(tokenAddress)
                if (sol.marketCap && sol.marketCap >= 50000 && sol.marketCap <= 1000000) {
                    await notifyNewTokenTelegram(`–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω c –≥–æ–≤–Ω–æ—Å–æ–ª—Å–∫–∞–Ω–∞!`, {
                        name: sol.name,
                        contract: tokenAddress,
                        marketCap: sol.marketCap,
                        volume: '—Ö–∑',
                        openGraph: `https://cdn.dexscreener.com/token-images/og/solana/${tokenAddress}?timestamp=${Date.now()}`
                    });
                    continue;
                }
                console.log(tokenAddress, '–î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'Skipped processing due to missing details');
                continue;
            }

            const { marketCap, liquidity, baseToken: {name}, priceUsd, info: { socials } } = dex;
            if (marketCap < 50000 || marketCap > 1000000 || liquidity.usd < 20000 || liquidity.usd > 150000 || priceUsd <= 0 || !socials || socials.count == 0) {
                console.log(tokenAddress, '–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º');
                continue;
            }

            trackedTokens.set(tokenAddress, {
                name,
                contract: tokenAddress,
                marketCap,
            });

            // if (needNotify) {
                await notifyNewTokenTelegram(`–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω!`, {
                    name,
                    contract: tokenAddress,
                    marketCap,
                    volume: liquidity.usd,
                    socials,
                    openGraph: `https://cdn.dexscreener.com/token-images/og/solana/${tokenAddress}?timestamp=${Date.now()}`
                });
            // }
            // subscribeToTokenLogs(tokenAddress);
        } catch (error) {
            console.log(tokenAddress, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞', error.message);
        }
    }
}
async function getDEXTokenDetails(tokenAddress) {
    try {
        const response = await axios.get(`https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`);
        if (response.data && response.data.pairs && response.data.pairs.length > 0) {
            return response.data.pairs[0];
        }
        const reason = `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}`;
        console.log(tokenAddress, reason, 'No data returned or malformed response');
        return null;
    } catch (error) {
        const reason = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}`;
        console.log(tokenAddress, reason, error.message);
        return null;
    }
}
async function getTokenDetails(tokenAddress) {
    try {
        const response = await axios.get(
            `https://pro-api.solscan.io/v2.0/token/meta?address=${tokenAddress}`,
            {
                headers: {
                    'accept': 'application/json',
                    'token': API_KEY // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á
                }
            }
        );
        if (response.data && response.data.success) {
            const data = response.data.data;
            return {
                name: data.name, // –ò–º—è —Ç–æ–∫–µ–Ω–∞
                symbol: data.symbol, // –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
                icon: data.icon, // –ò–∫–æ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–∞
                decimals: data.decimals, // –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏
                price: data.price, // –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞
                marketCap: data.market_cap, // –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                supply: data.supply, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                holder: data.holder // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
            };
        } else {
            const reason = `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}`;
            console.log(tokenAddress, reason, 'No data returned or malformed response');
            return null;
        }
    } catch (error) {
        const reason = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}`;
        console.log(tokenAddress, reason, error.message);
        return null;
    }
}

async function notifyNewTokenTelegram(text, tokenData) {
    const message = 
`üö® ${text} üö®
üí∞ –ú–∞—Ä–∫–µ—Ç–ö–∞–ø: ${tokenData.marketCap}
üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${tokenData.volume}
üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: ${tokenData.name}
üì∑ [–ü–∞—Ä–∞–º–µ—Ç—Ä—ã](${tokenData.openGraph})
üåê –°–æ—Ü—Å–µ—Ç–∏:
${tokenData.socials && tokenData.socials.map((social) => `- [${social.type}](${social.url})`).join('\n')}
üìä Dexscreener: [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Dexscreener](https://dexscreener.com/solana/${tokenData.contract})`; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    // –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ —á–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É
    for (const chatId of TELEGRAM_CHAT_IDS) {
        try {
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                // reply_markup: {
                //     inline_keyboard: [
                //         [
                //             { text: "Scam", callback_data: `scam_${tokenData.contract}` }
                //         ]
                //     ]
                // }
            });
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error.message);
        }
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "Scam"
async function notifyTelegram(text, tokenData, amountInSol, signature) {
    const message = 
`üö® ${text} üö®
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amountInSol.toFixed(2)} SOL
üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: ${tokenData.name}
üì∑ [–ü–∞—Ä–∞–º–µ—Ç—Ä—ã](${tokenData.openGraph})
üåê –°–æ—Ü—Å–µ—Ç–∏:
${tokenData.socials && tokenData.socials.map((social) => `- [${social.type}](${social.url})`).join('\n')}

üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é](https://solscan.io/tx/${signature})
üìä Dexscreener: [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Dexscreener](https://dexscreener.com/solana/${tokenData.contract})`; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ —á–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É
    for (const chatId of TELEGRAM_CHAT_IDS) {
        try {
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: "Scam", callback_data: `scam_${tokenData.contract}` }
                        ]
                    ]
                }
            });
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error.message);
        }
    }
}
function extractTokenAddresses(transactionData) {
    const tokenAddresses = [];
    if (!transactionData || !transactionData.meta) {
        console.warn("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
        return null;
    }

    const preTokenBalances = transactionData.meta.preTokenBalances || [];
    const postTokenBalances = transactionData.meta.postTokenBalances || [];
    const allTokenBalances = [...preTokenBalances, ...postTokenBalances];

    for (const balance of allTokenBalances) {
        if (balance.mint) {
            tokenAddresses.push(balance.mint);
        }
    }

    // –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã SOL –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –ø–æ—è–≤–∏–ª—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ
    const filteredTokens = tokenAddresses.filter(
        (item) => item !== SOL_ADDRESS
    );

    const tokenFrequency = filteredTokens.reduce((acc, token) => {
        acc[token] = (acc[token] || 0) + 1;
        return acc;
    }, {});

    let mostFrequentToken = null;
    let maxFrequency = 0;

    for (const [token, frequency] of Object.entries(tokenFrequency)) {
        if (frequency > maxFrequency) {
            mostFrequentToken = token;
            maxFrequency = frequency;
        }
    }

    return mostFrequentToken;
}
const taskQueue = [];
let isProcessing = false;

async function processQueue() {
    if (isProcessing || taskQueue.length === 0) return;
    isProcessing = true;

    while (taskQueue.length > 0) {
        const task = taskQueue.shift(); // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        try {
            await task();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        }
        // –ñ–¥—ë–º 500 –º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
        await new Promise(resolve => setTimeout(resolve, 500));
    }

    isProcessing = false;
}
// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function monitorTokens() {
    connectionForToken.onLogs(new PublicKey(
        '7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5'
      ), async (logInfo) => {
        try {
            setTimeout(() => {
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
                taskQueue.push(async () => {
                    const signature = logInfo.signature;
                    const tx = await connection.getTransaction(signature, {
                        maxSupportedTransactionVersion: 0,
                    });
                    const addresses = extractTokenAddresses(tx);
                    console.log('NEW TOKEN: ', addresses);
                    await processTokens([{ tokenAddress: addresses }]);
                });
                processQueue(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
            }, 50000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 60 —Å–µ–∫—É–Ω–¥
        } catch (err) {
            console.error(err)
        }
        
    })
}
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤...');
    monitorTokens();
}

main().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
});