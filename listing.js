const axios = require('axios');
const fs = require('fs');

const TOKENS_PATH = './tokens.json'; // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
const ANNOUNCED_PAIRS_PATH = './announced_pairs.json'; // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –∏–∑ –∞–Ω–æ–Ω—Å–æ–≤
const COINBASE_PATH = './coinbase_tokens.json';
const UPBIT_PATH = './upbit_tokens.json';
const ROBINHOOD_PATH = './robinhood_tokens.json';

const TELEGRAM_BOT_TOKEN = '7598035078:AAE5XXbnGKFWdz6nuk--P74TSd1iWg5zce8';
const TELEGRAM_CHAT_IDS = ['280101728', '170788417'];

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function saveToFile(filePath, data) {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filePath}`);
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
function loadFromFile(filePath) {
    if (fs.existsSync(filePath)) {
        const data = fs.readFileSync(filePath);
        return JSON.parse(data);
    }
    return [];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message) {
    for (const chatId of TELEGRAM_CHAT_IDS) {
        try {
            await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
                chat_id: chatId,
                text: message,
                parse_mode: 'Markdown'
            });
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error.message);
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å Binance
async function fetchTokens() {
    try {
        const response = await axios.get('https://api.binance.com/api/v3/exchangeInfo');
        const symbols = response.data.symbols;

        const tokens = new Set();
        symbols.forEach(pair => {
            tokens.add(pair.baseAsset);
            tokens.add(pair.quoteAsset);
        });

        return Array.from(tokens);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Binance:', error.message);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å Coinbase
async function fetchCoinbaseTokens() {
    try {
        const response = await axios.get('https://api.exchange.coinbase.com/products');
        const products = response.data;

        const tokens = new Set();
        products.forEach(product => {
            tokens.add(product.base_currency);
            tokens.add(product.quote_currency);
        });

        return Array.from(tokens);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Coinbase:', error.message);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å Upbit
async function fetchUpbitTokens() {
    try {
        const response = await axios.get('https://api.upbit.com/v1/market/all');
        const markets = response.data;

        const tokens = new Set();
        markets.forEach(market => {
            const [marketType, token] = market.market.split('-');
            tokens.add(token);
        });

        return Array.from(tokens);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Upbit:', error.message);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å Robinhood
async function fetchRobinhoodTokens() {
    try {
        const response = await axios.get('https://robinhood.com/api/instruments'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        const instruments = response.data.results;

        const tokens = instruments.map(instrument => instrument.symbol);

        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Robinhood:', error.message);
        return [];
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Binance
async function checkForNewTokens() {
    const savedTokens = loadFromFile(TOKENS_PATH);
    const currentTokens = await fetchTokens();

    const newTokens = currentTokens.filter(token => !savedTokens.includes(token));
    if (newTokens.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Binance:', newTokens);
        saveToFile(TOKENS_PATH, [...savedTokens, ...currentTokens]);

        for (const token of newTokens) {
            const message = `üîî –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ Binance: *${token}*\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Binance](https://www.binance.com/en/trade/${token}_USDT)`;
            await sendTelegramMessage(message);
        }
    } else {
        console.log('–ù–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Binance –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Coinbase
async function checkForNewCoinbaseTokens() {
    const savedTokens = loadFromFile(COINBASE_PATH);
    const currentTokens = await fetchCoinbaseTokens();

    const newTokens = currentTokens.filter(token => !savedTokens.includes(token));
    if (newTokens.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Coinbase:', newTokens);
        saveToFile(COINBASE_PATH, [...savedTokens, ...currentTokens]);

        for (const token of newTokens) {
            const message = `üîî –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ Coinbase: *${token}*\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Coinbase](https://www.coinbase.com/price/${token.toLowerCase()})`;
            await sendTelegramMessage(message);
        }
    } else {
        console.log('–ù–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Coinbase –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Upbit
async function checkForNewUpbitTokens() {
    const savedTokens = loadFromFile(UPBIT_PATH);
    const currentTokens = await fetchUpbitTokens();

    const newTokens = currentTokens.filter(token => !savedTokens.includes(token));
    if (newTokens.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Upbit:', newTokens);
        saveToFile(UPBIT_PATH, [...savedTokens, ...currentTokens]);

        for (const token of newTokens) {
            const message = `üîî –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ Upbit: *${token}*\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Upbit](https://upbit.com/exchange?code=CRIX.UPBIT.${token})`;
            await sendTelegramMessage(message);
        }
    } else {
        console.log('–ù–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Upbit –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Robinhood
async function checkForNewRobinhoodTokens() {
    const savedTokens = loadFromFile(ROBINHOOD_PATH);
    const currentTokens = await fetchRobinhoodTokens();

    const newTokens = currentTokens.filter(token => !savedTokens.includes(token));
    if (newTokens.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã Robinhood:', newTokens);
        saveToFile(ROBINHOOD_PATH, [...savedTokens, ...currentTokens]);

        for (const token of newTokens) {
            const message = `üîî –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ Robinhood: *${token}*\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Robinhood](https://robinhood.com/us/en/support)`;
            await sendTelegramMessage(message);
        }
    } else {
        console.log('–ù–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Robinhood –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
    }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
(async () => {
    console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...');

    await checkForNewTokens();
    await checkForNewCoinbaseTokens();
    await checkForNewUpbitTokens();
    // await checkForNewRobinhoodTokens();

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    setInterval(checkForNewTokens, 1000); // Binance - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(checkForNewCoinbaseTokens, 1000); // Coinbase - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    setInterval(checkForNewUpbitTokens, 1000); // Upbit - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    // setInterval(checkForNewRobinhoodTokens, 1000); // Robinhood - –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
})();